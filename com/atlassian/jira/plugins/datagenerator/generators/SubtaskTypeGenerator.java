// 
// Decompiled by Procyon v0.6.0
// 

package com.atlassian.jira.plugins.datagenerator.generators;

import org.slf4j.LoggerFactory;
import com.atlassian.jira.exception.CreateException;
import org.apache.commons.lang.time.StopWatch;
import com.atlassian.jira.plugins.datagenerator.GeneratorContext;
import org.springframework.beans.factory.annotation.Autowired;
import com.atlassian.plugin.spring.scanner.annotation.imports.ComponentImport;
import com.atlassian.jira.plugins.datagenerator.IssueTypeManagerHelper;
import com.atlassian.jira.config.SubTaskManager;
import org.slf4j.Logger;
import org.springframework.stereotype.Component;
import com.atlassian.plugin.spring.scanner.annotation.export.ExportAsService;

@ExportAsService
@Component
public class SubtaskTypeGenerator
{
    private static final Logger LOG;
    private static final String SUB_TASK_ISSUE_TYPE_ICON_URL = "/images/icons/issue_subtask.gif";
    private final SubTaskManager subTaskManager;
    private final IssueTypeManagerHelper issueTypeManagerHelper;
    
    @Autowired
    public SubtaskTypeGenerator(@ComponentImport final SubTaskManager subTaskManager, final IssueTypeManagerHelper issueTypeManagerHelper) {
        this.subTaskManager = subTaskManager;
        this.issueTypeManagerHelper = issueTypeManagerHelper;
    }
    
    public void generate(final GeneratorContext context) {
        int subtaskTypesCounter = context.generatorConfiguration.subtaskTypeCount;
        if (subtaskTypesCounter > 0) {
            final String msg = String.format("Generating %d subtask types", subtaskTypesCounter);
            SubtaskTypeGenerator.LOG.info(msg);
            context.currentTask.set("Loading workflows");
            context.resetProgress(msg, subtaskTypesCounter);
            long sequenceCounter = this.issueTypeManagerHelper.getNextSubtaskSequenceNumber();
            final StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            while (subtaskTypesCounter-- > 0) {
                try {
                    this.subTaskManager.insertSubTaskIssueType("SubtaskType" + sequenceCounter, Long.valueOf(sequenceCounter), "Autogenerated subtask type", "/images/icons/issue_subtask.gif");
                }
                catch (final CreateException e) {
                    final String errorMsg = "Error during subtask type creation with name: SubtaskType" + sequenceCounter;
                    SubtaskTypeGenerator.LOG.error(errorMsg);
                }
                finally {
                    ++sequenceCounter;
                    context.incProgress();
                }
            }
            stopWatch.stop();
            context.messages.add(String.format("Generated %d subtask types in %s", context.generatorConfiguration.subtaskTypeCount, stopWatch.toString()));
        }
    }
    
    static {
        LOG = LoggerFactory.getLogger((Class)SubtaskTypeGenerator.class);
    }
}
