// 
// Decompiled by Procyon v0.6.0
// 

package com.atlassian.jira.plugins.datagenerator.generators;

import org.slf4j.LoggerFactory;
import com.atlassian.jira.security.roles.RoleActorDoesNotExistException;
import com.atlassian.jira.security.roles.ProjectRoleActors;
import com.atlassian.jira.security.roles.ProjectRoleActor;
import java.util.Iterator;
import java.util.Set;
import com.atlassian.jira.security.roles.ProjectRoleActorsImpl;
import com.google.common.collect.Sets;
import com.atlassian.jira.security.roles.ProjectRole;
import com.atlassian.jira.security.roles.ProjectRoleImpl;
import org.apache.commons.lang.time.StopWatch;
import com.google.common.collect.Lists;
import com.atlassian.jira.plugins.datagenerator.util.Randomizer;
import org.springframework.beans.factory.annotation.Autowired;
import com.atlassian.plugin.spring.scanner.annotation.imports.ComponentImport;
import com.atlassian.jira.security.roles.RoleActorFactory;
import com.atlassian.jira.plugins.datagenerator.text.DictionaryTextGenerator;
import com.atlassian.jira.security.roles.ProjectRoleManager;
import com.atlassian.jira.plugins.datagenerator.GeneratorContext;
import com.atlassian.jira.project.Project;
import java.util.List;
import org.slf4j.Logger;
import org.springframework.stereotype.Component;

@Component
public class RoleGenerator
{
    private static final Logger LOG;
    private List<Project> projectsToAssign;
    private GeneratorContext generatorContext;
    private final ProjectRoleManager projectRoleManager;
    private final DictionaryTextGenerator dictionaryTextGenerator;
    private final RoleActorFactory roleActorFactory;
    
    @Autowired
    public RoleGenerator(@ComponentImport final ProjectRoleManager projectRoleManager, @ComponentImport final RoleActorFactory roleActorFactory) {
        this.projectRoleManager = projectRoleManager;
        this.roleActorFactory = roleActorFactory;
        this.dictionaryTextGenerator = new DictionaryTextGenerator(0.5f, 1, 1);
    }
    
    public void prepare(final GeneratorContext generatorContext) {
        this.generatorContext = generatorContext;
        this.projectsToAssign = Randomizer.randomItems(generatorContext.generatorConfiguration.assignRolesCount, generatorContext.createdProjects);
    }
    
    private String generateRole() {
        return this.dictionaryTextGenerator.generateText(1);
    }
    
    public void generate() throws Exception {
        final int count = this.generatorContext.generatorConfiguration.rolesCount;
        final List<ProjectRole> generatedRoles = Lists.newArrayListWithExpectedSize(this.generatorContext.generatorConfiguration.rolesCount);
        if (count <= 0) {
            RoleGenerator.LOG.info("Role creation not requested, skipping.");
            return;
        }
        this.generatorContext.resetProgress(String.format("Generating roles (%d in total)", count), count);
        RoleGenerator.LOG.info("Generating {} roles", (Object)count);
        final StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        for (int i = 0; i < this.generatorContext.generatorConfiguration.rolesCount; ++i) {
            while (true) {
                final String role = this.generateRole();
                try {
                    final ProjectRole projectRole = this.projectRoleManager.createRole((ProjectRole)new ProjectRoleImpl(role, "A role generated by Jira Data Generator"));
                    generatedRoles.add(projectRole);
                    this.generatorContext.incProgress();
                }
                catch (final IllegalArgumentException ignore) {
                    RoleGenerator.LOG.warn("Could not shut down enitity manager", (Throwable)ignore);
                    continue;
                }
                break;
            }
        }
        stopWatch.stop();
        final String message = String.format("Generated %d roles in %s", count, stopWatch.toString());
        this.generatorContext.messages.add(message);
        RoleGenerator.LOG.info(message);
        this.generateActors(generatedRoles);
    }
    
    private void generateActors(final List<ProjectRole> generatedRoles) throws RoleActorDoesNotExistException {
        final List<String> generatedUserKeys = this.generatorContext.generatedUserKeys;
        final List<String> generatedGroupKeys = this.generatorContext.generatedGroupKeys;
        final int rolesCount = this.generatorContext.generatorConfiguration.rolesCount;
        final int count = rolesCount * (generatedGroupKeys.size() + generatedUserKeys.size()) * this.projectsToAssign.size();
        if (count <= 0) {
            RoleGenerator.LOG.info("Role actor creation not requested, skipping.");
            return;
        }
        this.generatorContext.resetProgress(String.format("Generating role actors (%d in total)", count), count);
        RoleGenerator.LOG.info("Generating {} role actors", (Object)count);
        final StopWatch stopWatch = new StopWatch();
        stopWatch.start();
        for (final Project project : this.projectsToAssign) {
            for (final ProjectRole role : generatedRoles) {
                final Set<ProjectRoleActor> projectRoleActorsSet = Sets.newHashSetWithExpectedSize(generatedUserKeys.size() + generatedGroupKeys.size());
                for (final String userKey : generatedUserKeys) {
                    final ProjectRoleActor roleActor = this.roleActorFactory.createRoleActor((Long)null, role.getId(), project.getId(), "atlassian-user-role-actor", userKey);
                    projectRoleActorsSet.add(roleActor);
                    this.generatorContext.incProgress();
                }
                for (final String groupKey : generatedGroupKeys) {
                    final ProjectRoleActor roleActor = this.roleActorFactory.createRoleActor((Long)null, role.getId(), project.getId(), "atlassian-group-role-actor", groupKey);
                    projectRoleActorsSet.add(roleActor);
                    this.generatorContext.incProgress();
                }
                final ProjectRoleActors projectRoleActors = (ProjectRoleActors)new ProjectRoleActorsImpl(project.getId(), role.getId(), (Set)projectRoleActorsSet);
                this.projectRoleManager.updateProjectRoleActors(projectRoleActors);
            }
        }
        stopWatch.stop();
        final String message = String.format("Generated %d role actors in %s", count, stopWatch.toString());
        this.generatorContext.messages.add(message);
        RoleGenerator.LOG.info(message);
    }
    
    static {
        LOG = LoggerFactory.getLogger((Class)RoleGenerator.class);
    }
}
